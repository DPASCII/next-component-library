{"version":3,"file":"manager.js","sources":["../src/constants.ts","../src/components/Color.tsx","../src/components/ThemeList.tsx","../src/components/ThemeSwitcherTool.tsx","../src/manager.ts"],"sourcesContent":["export const ADDON_ID = \"storybook/theme-provider\";\nexport const TOOL_ID = `${ADDON_ID}/tool`;\nexport const PARAM_KEY = `myAddonParameter`;\n","import React, { FC } from \"react\";\nimport { styled } from \"@storybook/theming\";\n\nconst gradient =\n  \"linear-gradient(-45deg, transparent, transparent 45%, pink 45%, pink 55%, transparent 55%, transparent 100%)\";\n\nexport const Color: FC<{ colorName?: string }> = ({ colorName = gradient }) => {\n  return <ColorDiv style={{ background: colorName }} />;\n};\n\nexport const ColorDiv = styled.div({\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"8px\",\n  border: \"1px solid lightgray\",\n});\n","import React, { FC } from \"react\";\nimport {\n  ListItem,\n  TooltipNote,\n  Span,\n  TooltipMessage,\n} from \"@storybook/components\";\nimport { ThemeConfigType } from \"../features/ThemeConfigType\";\nimport { useGlobalThemesManager } from \"../features/useGlobalThemes\";\nimport { Color } from \"./Color\";\n\nexport const ThemeList: FC<{\n  themes?: ThemeConfigType[];\n  onSelect: (name: string) => void;\n}> = ({ themes, onSelect }) => {\n  const { selectedTheme } = useGlobalThemesManager();\n  const hasConfig = (Boolean(themes) && Array.isArray(themes)) && Boolean(selectedTheme)\n  return hasConfig ? (\n    <div>\n      {themes.map(({ name, color }) => {\n        return (\n          <ListItem\n            active={selectedTheme === name}\n            onClick={() => {\n              selectedTheme !== name && onSelect(name);\n            }}\n            key={name}\n            title={name}\n            right={<Color colorName={color} />}\n          />\n        );\n      })}\n    </div>\n  ) : (\n    <TooltipMessage\n      title=\"Missing theme config\"\n      desc=\"Add themes list and selected theme to .storybook/preview.js\"\n    />\n  );\n};\n","import React, { memo, useCallback } from \"react\";\nimport { IconButton, WithTooltipPure } from \"@storybook/components\";\nimport { Palette } from \"@phosphor-icons/react\";\n\nimport { TOOL_ID } from \"../constants\";\nimport { ThemeList } from \"./ThemeList\";\nimport { useGlobalThemesManager } from \"../features/useGlobalThemes\";\n\nexport type ThemeType = {\n  name: string;\n  color?: string;\n  selected?: boolean;\n  themeObject: Record<string, unknown>;\n};\n\nexport const ThemeSwitcherTool = memo(function MyAddonSelector() {\n  const { themes, setSelectedTheme } = useGlobalThemesManager();\n\n  const handleSelect = useCallback(\n    (name: string) => {\n      setSelectedTheme(name);\n    },\n    [themes],\n  );\n\n  return (\n    <WithTooltipPure\n      trigger=\"click\"\n      closeOnTriggerHidden={true}\n      closeOnOutsideClick={true}\n      tooltip={<ThemeList onSelect={handleSelect} themes={themes} />}\n    >\n      <IconButton key={TOOL_ID} title=\"Switch theme\">\n        <Palette size={16} color=\"#73828c\" weight=\"regular\" />\n      </IconButton>\n    </WithTooltipPure>\n  );\n});\n","import { addons, types } from \"@storybook/manager-api\";\nimport { ADDON_ID, TOOL_ID } from \"./constants\";\nimport { ThemeSwitcherTool } from \"./components/ThemeSwitcherTool\";\n\n/**\n * Note: if you want to use JSX in this file, rename it to `manager.tsx`\n * and update the entry prop in tsup.config.ts to use \"src/manager.tsx\",\n */\n\n// Register the addon\naddons.register(ADDON_ID, () => {\n  // Register the tool\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    title: \"Theme provider\",\n    match: ({ viewMode }) => !!(viewMode && viewMode.match(/^(story|docs)$/)),\n    render: ThemeSwitcherTool,\n  });\n});\n"],"names":["ADDON_ID","TOOL_ID","gradient","Color","colorName","ColorDiv","styled","ThemeList","themes","onSelect","selectedTheme","useGlobalThemesManager","name","color","jsx","ListItem","TooltipMessage","ThemeSwitcherTool","memo","setSelectedTheme","handleSelect","useCallback","WithTooltipPure","IconButton","Palette","addons","types","viewMode"],"mappings":";;;;;;;AAAO,MAAMA,IAAW,4BACXC,IAAU,GAAGD,CAAQ,SCE5BE,IACJ,gHAEWC,IAAoC,CAAC,EAAE,WAAAC,IAAYF,0BACtDG,GAAS,EAAA,OAAO,EAAE,YAAYD,KAAa,GAGxCC,IAAWC,EAAO,IAAI;AAAA,EACjC,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,QAAQ;AACV,CAAC,GCJYC,IAGR,CAAC,EAAE,QAAAC,GAAQ,UAAAC,QAAe;AACvB,QAAA,EAAE,eAAAC,EAAc,IAAIC,EAAuB;AAE1C,SADY,EAAQH,KAAW,MAAM,QAAQA,CAAM,KAAM,EAAQE,sBAErE,OACE,EAAA,UAAAF,EAAO,IAAI,CAAC,EAAE,MAAAI,GAAM,OAAAC,QAEjB,gBAAAC;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,QAAQL,MAAkBE;AAAA,MAC1B,SAAS,MAAM;AACK,QAAAF,MAAAE,KAAQH,EAASG,CAAI;AAAA,MACzC;AAAA,MAEA,OAAOA;AAAA,MACP,OAAO,gBAAAE,EAACX,GAAM,EAAA,WAAWU,EAAO,CAAA;AAAA,IAAA;AAAA,IAF3BD;AAAA,EAGP,CAEH,GACH,IAEA,gBAAAE;AAAA,IAACE;AAAA,IAAA;AAAA,MACC,OAAM;AAAA,MACN,MAAK;AAAA,IAAA;AAAA,EACP;AAEJ,GCxBaC,IAAoBC,EAAK,WAA2B;AAC/D,QAAM,EAAE,QAAAV,GAAQ,kBAAAW,EAAiB,IAAIR,EAAuB,GAEtDS,IAAeC;AAAA,IACnB,CAACT,MAAiB;AAChB,MAAAO,EAAiBP,CAAI;AAAA,IACvB;AAAA,IACA,CAACJ,CAAM;AAAA,EACT;AAGE,SAAA,gBAAAM;AAAA,IAACQ;AAAA,IAAA;AAAA,MACC,SAAQ;AAAA,MACR,sBAAsB;AAAA,MACtB,qBAAqB;AAAA,MACrB,SAAS,gBAAAR,EAACP,GAAU,EAAA,UAAUa,GAAc,QAAAZ,GAAgB;AAAA,MAE5D,UAAC,gBAAAM,EAAAS,GAAA,EAAyB,OAAM,gBAC9B,UAAC,gBAAAT,EAAAU,GAAA,EAAQ,MAAM,IAAI,OAAM,WAAU,QAAO,UAAA,CAAU,KADrCvB,CAEjB;AAAA,IAAA;AAAA,EACF;AAEJ,CAAC;AC3BDwB,EAAO,SAASzB,GAAU,MAAM;AAE9B,EAAAyB,EAAO,IAAIxB,GAAS;AAAA,IAClB,MAAMyB,EAAM;AAAA,IACZ,OAAO;AAAA,IACP,OAAO,CAAC,EAAE,UAAAC,QAAe,CAAC,EAAEA,KAAYA,EAAS,MAAM,gBAAgB;AAAA,IACvE,QAAQV;AAAA,EAAA,CACT;AACH,CAAC;"}